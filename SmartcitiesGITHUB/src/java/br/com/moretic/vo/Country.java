package br.com.moretic.vo;

// Generated by Hibernate Tools 4.0.0
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Cacheable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * Country generated by hbm2java
 */
@Entity
@Table(name = "country", schema = "public")
@Cacheable(true)
@Cache(usage = CacheConcurrencyStrategy.READ_ONLY)
public class Country implements java.io.Serializable, Comparable<Country> {

    @Id
    @Column(name = "idcountry", unique = true, nullable = false)
    @SequenceGenerator(name = "country_seq", sequenceName = "country_id_seq", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "country_seq")
    private Integer idcountry;

    @Column(name = "nm_country", length = 45, nullable = false,unique = true)
    private String nmCountry;

    @Column(name = "country_code", length = 2, nullable = false,unique = true)
    private String code;

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "country")
    private Set<State> states = new HashSet<State>(0);

    public Country() {
    }

    public Country(int idcountry) {
        this.idcountry = idcountry;
    }

    public Country(int idcountry, String nmCountry, Set<State> states) {
        this.idcountry = idcountry;
        this.nmCountry = nmCountry;
        this.states = states;
    }

    public int getIdcountry() {
        return this.idcountry;
    }

    public void setIdcountry(int idcountry) {
        this.idcountry = idcountry;
    }

    public String getNmCountry() {
        return this.nmCountry;
    }

    public void setNmCountry(String nmCountry) {
        this.nmCountry = nmCountry.toUpperCase();
    }

    @JsonIgnore
    public Set<State> getStates() {
        return this.states;
    }

    public void setStates(Set<State> states) {
        this.states = states;
    }

    public void setIdcountry(Integer idcountry) {
        this.idcountry = idcountry;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Override
    public int compareTo(Country o) {
        return this.getNmCountry().compareTo(o.getNmCountry());
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + (this.idcountry != null ? this.idcountry.hashCode() : 0);
        hash = 37 * hash + (this.nmCountry != null ? this.nmCountry.hashCode() : 0);
        hash = 37 * hash + (this.code != null ? this.code.hashCode() : 0);
        hash = 37 * hash + (this.states != null ? this.states.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Country other = (Country) obj;
        if (this.idcountry != other.idcountry && (this.idcountry == null || !this.idcountry.equals(other.idcountry))) {
            return false;
        }
        if ((this.nmCountry == null) ? (other.nmCountry != null) : !this.nmCountry.equals(other.nmCountry)) {
            return false;
        }
        if ((this.code == null) ? (other.code != null) : !this.code.equals(other.code)) {
            return false;
        }
        if (this.states != other.states && (this.states == null || !this.states.equals(other.states))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "country:{" + "idcountry:" + idcountry + ", nmCountry:'" + nmCountry + "', code:'" + code + "'}";
    }

}
